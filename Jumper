import pygame as pg
from sys import exit
vec = pg.math.Vector2

#settings
width = 1200
height = 1000
platforms_list = [(0,height - 20,width,20),(300,900,400,20),(0,0,20,height - 20)]

class Player(pg.sprite.Sprite):
    def __init__(self,game):
        pg.sprite.Sprite.__init__(self)
        self.image = pg.Surface((30,30))
        self.image.fill("White")
        self.rect = self.image.get_rect()
        self.rect.center = (400,500)
        self.pos = vec(width/2,height/2)
        self.vel = vec(0,0)
        self.acc = vec(0,0)
        self.movespeed = 0.8
        self.jumpspeed = -10
        self.lives = 3
        self.game = game
        self.dead = False
        self.fric = -0.1
        self.left = False
        self.right = False

    def jump(self):
        #jumps if on platform
        self.rect.x += 1
        hits = pg.sprite.spritecollide(self,self.game.platforms,False)
        self.rect.x -= 1
        if hits:
            self.vel.y = self.jumpspeed

    def update(self):
        #sets gravity
        self.acc = vec(0,0.5)
        #moves the player right/left
        if self.left:
            self.acc.x = -self.movespeed
            self.left = False
        if self.right:
            self.acc.x = self.movespeed
            self.right = False


        #applies friction and updates acc,vel
        self.acc.x += self.fric*self.vel.x
        self.vel += self.acc
        #checks for platform collisions
        for platform in self.game.platforms:
            self.pos.x += self.vel.x
            x_hit = pg.sprite.spritecollide(self,platform,False)
            self.pos.x -= self.vel.x
            self.pos.y += self.vel.y
            y_hit = pg.sprite.spritecollide(self,platform,False)
            self.pos.y -= self.vel.y
            if x_hit:
                if self.vel.x < 0:
                    self.vel.x = 0
                    self.pos.x = platform.rect.right + 15
                if self.vel.x > 0:
                    self.vel.x = 0
                    self.pos.x = platform.rect.left + 15
            if y_hit:
                if self.vel.y < 0:
                    self.vel.y = 0
                    self.pos.y = platform.rect.bottom + 30
                if self.vel.y > 0:
                    self.vel.y = 0
                    self.pos.y = platform.rect.top
        self.rect.midbottom = self.pos

        #checks if touching lava,enemy,etc.
        hostile_hits = pg.sprite.spritecollide(self,self.game.hostiles,False)
        for hit in hostile_hits:
            if hit: self.dead = True

class Platform(pg.sprite.Sprite):
    def __init__(self,x,y,w,h):
        pg.sprite.Sprite.__init__(self)
        self.image = pg.Surface((w,h))
        self.image.fill("Grey")
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

class Game:
    def __init__(self):
        pg.init()
        self.screen = pg.display.set_mode((width,height))
        pg.display.set_caption("Jumper")
        self.clock = pg.time.Clock()
        self.running = True
        pg.key.set_repeat(1,10)
        self.font_name = pg.font.match_font("arial")

    def new(self):
        #creates sprite groups
        self.all_sprites = pg.sprite.Group()
        self.platforms = pg.sprite.Group()
        self.hostiles = pg.sprite.Group()
        self.player = Player(self)
        #loops through platforms and adds them to groups
        for platform in platforms_list:
            current_platform = Platform(*platform)
            self.all_sprites.add(current_platform)
            self.platforms.add(current_platform)
        self.all_sprites.add(self.player)
        self.run()

    def run(self):
        self.playing = True
        while self.playing:
            self.clock.tick(60)
            self.events()
            self.update()
            self.draw()

    def update(self):
        self.all_sprites.update()

    def events(self):
        #checks for closing program
        if pg.event.peek(eventtype = pg.QUIT):
            pg.quit
            exit()
        #gets movement input
        elif pg.event.peek(eventtype = pg.KEYDOWN):
            event = pg.event.get(eventtype = pg.KEYDOWN).pop()
            if event.key == pg.K_UP or event.key == pg.K_w:
                self.player.jump()
            if event.key == pg.K_LEFT or event.key == pg.K_a:
                self.player.left = True
            if event.key == pg.K_RIGHT or event.key == pg.K_d:
                self.player.right = True

    def draw(self):
        self.screen.fill("Black")
        self.all_sprites.draw(self.screen)
        pg.display.flip()

    def draw_text(self, text, size, color, x, y):
        #helper function to draw text easier
        font = pg.font.Font(self.font_name, size)
        text_surface = font.render(text, True, color)
        text_rect = text_surface.get_rect()
        text_rect.midtop = (x, y)
        self.screen.blit(text_surface, text_rect)

game = Game()
while game.running:
    game.new()
